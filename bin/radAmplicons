#!/usr/bin/env python

# radSeqAmp
#
######################################################################
#
# radSeqAmp is an application which processes radAmSeq Illumina amplicon experiments.
#
######################################################################

import sys
import os
import argparse
from subprocess import Popen
from subprocess import PIPE
from subprocess import STDOUT
from subprocess import check_call
from subprocess import CalledProcessError
from multiprocessing import cpu_count

from distutils import spawn

try:
    from radSeqAmp import version_num
except ImportError:
    version_num = "error importing version number"

profile = False


#####################################################################################
# Validate the sample, barcode and primer files
def validateParser(subparsers):
    """
    validateParser parser parameters
    """
    #
    # Parse options
    #
    validate_parser = subparsers.add_parser('validate', help='validate the sample, barcode and primer sheets')
    validate_parser.add_argument('-P', '--primer_file', help='file with primers',
                                 action='store', type=str, dest='primer_file', metavar='FILENAME', required=True)
    validate_parser.add_argument('-S', '--sample_metadata', help='file with sample metadata',
                                 action='store', type=str, dest='samples_file', metavar='FILENAME', required=True)
    validate_parser.add_argument('-v', '--silent', help='silences verbose output [default: %(default)s]',
                                 action='store_true', dest='verbose', default=False)
    validate_parser.add_argument('--debug', help='show traceback on error',
                                 action='store_true', dest="debug", default=False)
    return validate_parser


class validateCMD:
    """
    validate validateApp parser parameters and launch the app
    """
    def __init__(self):
        pass

    def execute(self, args):
        verbose = not args.verbose
        # ----------------------- options input files -----------------------
        sFile = args.samples_file
        prFile = args.primer_file

        from radSeqAmp import validateApp
        app = validateApp()

        if profile:
            import cProfile
            cProfile.runctx('app.start(prFile, sFile, verbose, args.debug)', globals(), locals())
            return 255
        else:
            return app.start(prFile, sFile, verbose, args.debug)


#####################################################################################
# Preprocess two read raw amplicon data set
def preprocessParser(subparsers):
    """
    preprocessParser parser parameters
    """
    #
    # Parse options
    #
    preprocess_parser = subparsers.add_parser('preprocess', help='Preprocess two read raw radAmSeq amplicon data, identifying primer sequences and TA genomic insertion site')
    preprocess_parser.add_argument('-S', '--sample_file', help='tab delimited file for multi-sample processing (NOT YET FUNCTIONAL) [default: %(default)s]',
                                   action='store', type=str, dest='samples_file', metavar='FILENAME', default=None)
    preprocess_parser.add_argument('-P', '--primer_file', help='file with primers',
                                   action='store', type=str, dest='primer_file', metavar='FILENAME', default=None)
    preprocess_parser.add_argument('-d', '--primerdiff', help='max hamming dist from primer [default: %(default)s]',
                                   type=int, dest='primerdiff', default=4)
    preprocess_parser.add_argument('-e', '--primerend', help='required number of matching bases at end of primer [default: %(default)s]',
                                   type=int, dest='primerend', default=4)
    preprocess_parser.add_argument('-t', '--insertionSite', help='The expected genomic insertion site [default: %(default)s]',
                                   action='store', type=str, dest='insertionSite', metavar='TA', default='TA')
    preprocess_parser.add_argument('-q', '--minQ', help="trim 3' end of sequences to minQ [default: %(default)s]",
                                   type=int, dest='minQ', default=None),
    preprocess_parser.add_argument('-l', '--minL', help='if minQ is not None, only keep reads that are at least minL length [default: %(default)s]',
                                   type=int, dest='minL', default=0),
    preprocess_parser.add_argument('-b', '--batchsize', help='batch size to process reads in [default: %(default)s]',
                                   type=int, dest='batchsize', default=100000)
    preprocess_parser.add_argument('-O', '--output_prefix', help='output file basename [default: fastq_prefix]',
                                   action='store', type=str, dest='output_base', metavar='PREFIX', default=None)
    preprocess_parser.add_argument('-U', '--output_unidentified', help='output unidentified reads [default: %(default)s]',
                                   action='store_true', dest='unidentified', default=False)
    preprocess_parser.add_argument('-u', '--uncompressed', help='leave output files uncompressed [default: %(default)s]',
                                   action='store_true', dest='uncompressed', default=False)
    preprocess_parser.add_argument('-v', '--silent', help='silences verbose output [default: %(default)s]',
                                   action='store_true', dest='verbose', default=False)
    preprocess_parser.add_argument('-1', metavar="read1", dest='fastq_file1', help='read1 of an amplicon fastq four file set',
                                   action='store', type=str, required=True, nargs='+')
    preprocess_parser.add_argument('-2', metavar="read2", dest='fastq_file2', help='read2 of an amplicon fastq four file set',
                                   action='store', type=str, required=False, nargs='+')
    preprocess_parser.add_argument('--test', help='exit after the first batch in order to test the inputs',
                                   action='store_true', dest="test", default=False)
    preprocess_parser.add_argument('--debug', help='show traceback on error',
                                   action='store_true', dest="debug", default=False)
    return preprocess_parser


class preprocessCMD:
    """
    validate preprocessApp parser parameters and launch the app
    """
    def __init__(self):
        pass

    def execute(self, args):
        verbose = not args.verbose
        # ----------------------- options input files -----------------------
        if args.samples_file is None:
            sFile = None
        else:
            sFile = args.samples_file
            sys.stderr.write("Error: samples file is not  functional yet\n")
            return 1
        if args.primer_file is None:
            sys.stderr.write("Error: No primer file identified\n")
            return 1
        else:
            prFile = args.primer_file
        # ----------------------- options output prefix -----------------------
        if args.output_base is None and sFile is None:
            output_prefix = "preprocessed_out"
        elif args.output_base is not None and sFile is None:
            output_prefix = args.output_base

        from radSeqAmp import preprocessApp
        app = preprocessApp()

        if profile:
            import cProfile
            cProfile.runctx('app.start(args.fastq_file1, args.fastq_file2, output_prefix, prFile, args.primerdiff, args.primerend, args.insertionSite, args.batchsize, args.uncompressed, args.unidentified, args.minQ, args.minL, verbose, args.debug, args.test)', globals(), locals())
            return 255
        else:
            return app.start(args.fastq_file1, args.fastq_file2, output_prefix, prFile, args.primerdiff, args.primerend, args.insertionSite, args.batchsize, args.uncompressed, args.unidentified, args.minQ, args.minL, verbose, args.debug, args.test)


#####################################################################################
# join reads using flash, path through application
def joinFun(args, verbose):
    from radSeqAmp import parse_flash
#    print args
    p = Popen(args, stdout=PIPE, stderr=STDOUT, close_fds=False)
    pf = parse_flash(p.stdout, verbose)
    return pf


def joinParser(subparsers):
    """
    joinParser parser parameters
    """
    #
    # Parse options
    #
    join_parser = subparsers.add_parser('join', help='join reads using flash2')
    join_parser.add_argument('-O', '--output_path', help='path for output files [default: %(default)s]',
                             action='store', type=str, dest='output_base', metavar='PREFIX', default="joined")
    join_parser.add_argument('-u', '--uncompressed', help='leave output files uncompressed [default: %(default)s]',
                             action='store_true', dest='uncompressed', default=False)
    join_parser.add_argument('-x', '--max-mismatch-density', help=' Maximum allowed ratio between the number of \
                                      mismatched base pairs and the overlap length. \
                                      Two reads will not be combined with a given overlap \
                                      if that overlap results in a mismatched base density \
                                      higher than this value.  Note: Any occurrence of an \
                                      "N" in either read is ignored and not counted \
                                      towards the mismatches or overlap length. [default:%(default)s]', type=float, dest='max_mixmatch_density', metavar='NUM',
                             default=0.25)
    join_parser.add_argument('-t', '--threads', metavar='NTHREADS', help='Set the number of worker threads. [default: %(default)s]',
                             type=int, dest='threads', default=1)
    join_parser.add_argument('-v', '--verbose', help='verbose output [default: %(default)s]',
                             action='store_true', dest='verbose', default=True)
    join_parser.add_argument('-1', metavar="read1", dest='fastq_file1', help='read1 of an amplicon fastq (or fastq.gz) two file set',
                             action='store', type=str, required=True)
    join_parser.add_argument('-2', metavar="read2", dest='fastq_file2', help='read2 of an amplicon fastq (or fastq.gz)  two file set',
                             action='store', type=str, required=False)
    return join_parser


class joinCMD:
    """
    validate joinApp parser parameters and launch the app
    """
    def __init__(self):
        pass

    def execute(self, args):
        # ----------------------- options output prefix -----------------------
        output_prefix = args.output_base

        from radSeqAmp import misc
        misc.make_sure_path_exists(os.path.dirname(output_prefix))
        if args.uncompressed:
            compress = ""
        else:
            compress = '-z'
        if not os.path.isfile(args.fastq_file1):
            sys.stderr.write("File: %s not found" % args.fastq_file1)
            sys.exit()
        fastq_file1 = os.path.realpath(args.fastq_file1)

        if args.fastq_file2 is None:
            fastq_file2 = misc.infer_read_file_name(fastq_file1, "2")
        elif not os.path.isfile(args.fastq_file2):
            sys.stderr.write("File: %s not found" % args.fastq_file2)
            sys.exit()
        else:
            fastq_file2 = args.fastq_file2

        flash_path = spawn.find_executable("flash2")
        if flash_path is None:
            flash2_download = "https://github.com/dstreett/FLASH2"
            sys.stderr.write("flash2 not found, please download and install from: %s\n" % flash2_download)
            sys.exit()

        # System call, try adding Popen and CString to capture output
        call_string = [flash_path, "--max-overlap", str(600), "--allow-outies", "-t", str(args.threads), "-x", str(args.max_mixmatch_density), "-o", output_prefix, compress, fastq_file1, fastq_file2]
        if profile:
            import cProfile
            cProfile.runctx('joinFun(call_string, args.verbose)', globals(), locals())
            return 255
        else:
            return joinFun(call_string, args.verbose)


#####################################################################################
# screen reads using bowtie2 and a reference file
def mappingParser(subparsers):
    """
    mappingParser parser parameters
    """
    #
    # Parse options
    #
    mapping_parser = subparsers.add_parser('map', help='map reads using bowtie2 to a reference sequence file')
    mapping_parser.add_argument('-p', '--processors', help='number of processors to use in bowtie2, [default: %(default)s]',
                                type=int, dest='procs', default=1)
    mapping_parser.add_argument('-u', '--uncompressed', help='leave output files uncompressed [default: %(default)s]',
                                action='store_true', dest='uncompressed', default=True)
    mapping_parser.add_argument('-R', '--reference', help='reference fasta file to screen reads against',
                                action='store', type=str, dest='reference', metavar='reference.fasta', default=None, required=True)
    mapping_parser.add_argument('-t', '--insertionSite', help='The expected genomic insersion site [default: %(default)s]',
                                action='store', type=str, dest='insertionSite', metavar='TA', default='TA')
    mapping_parser.add_argument('-o', '--overwrite', help='If a bowtie2 index already exits overwrite it [default: %(default)s]',
                                action='store_true', dest='overwrite', default=False)
    mapping_parser.add_argument('-s', '--sensitivity', help='bowtie2 sensitivity to use 0=--very-fast, 1=--fast, 2=--sensitive, 3=--very-sensitive [default: %(default)s]',
                                type=int, dest='sensitivity', default=2)
    mapping_parser.add_argument('-I', '--minins', metavar='<int>', help='minimum fragement length [default: %(default)s]',
                                type=int, dest='minins', default=0)
    mapping_parser.add_argument('-X', '--maxins', metavar='<int>', help='maximum fragement length [default: %(default)s]',
                                type=int, dest='maxins', default=700)
    mapping_parser.add_argument('-m', '--mapq', metavar='<int>', help='minimum mapq value to accept read [default: %(default)s]',
                                type=int, dest='mapq', default=10)
    mapping_parser.add_argument('-d', '--dedup', help='Detect PCR Duplicates from primer, molecular index and alignment [default: %(default)s]',
                                action='store_false', dest='dedupReads', default=True)
    mapping_parser.add_argument('-O', '--output_path', help='path (and prefix) for output files [default: %(default)s]',
                                action='store', type=str, dest='output_base', metavar='outputPrefix', default='mapping')
    mapping_parser.add_argument('-1', metavar="read1", dest='fastq_file1', help='read1 of an amplicon fastq two file set',
                                action='store', type=str, default=None, required=False, nargs='+')
    mapping_parser.add_argument('-2', metavar="read2", dest='fastq_file2', help='read2 of an amplicon fastq two file set',
                                action='store', type=str, default=None, required=False, nargs='+')
    mapping_parser.add_argument('-U', metavar="single", dest='fastq_file3', help='single-end amplicon, typically from joined paired reads',
                                action='store', type=str, default=None, required=False, nargs='+')
    mapping_parser.add_argument('-v', '--silent', help='silences verbose output [default: %(default)s]',
                                action='store_true', dest='verbose', default=False)
    mapping_parser.add_argument('--debug', help='show traceback on error',
                                action='store_true', dest='debug', default=False)
    return mapping_parser


class mappingCMD:
    """
    validate classifyApp parser parameters and launch the app
    """
    def __init__(self):
        pass

    def execute(self, args):
        # ----------------------- options reference file -----------------------
        reference = args.reference
        # ----------------------- options output prefix -----------------------
        output_prefix = args.output_base
        # ----------------------- other options ------------
        debug = args.debug
        verbose = not args.verbose
        procs = args.procs
        overwrite = args.overwrite
        uncompressed = args.uncompressed
        sensitivity = args.sensitivity
        if sensitivity < 0 or sensitivity > 3:
            sys.stderr.write("Sensitivity parameter must be in the range of 0 and 3\n")
            sys.exit()

        bowtie2_path = spawn.find_executable("bowtie2")
        if bowtie2_path is None:
            bowtie2_download = "http://bowtie-bio.sourceforge.net/bowtie2/index.shtml"
            sys.stderr.write("bowtie2 not found on the path, please download and install from: %s\n" % bowtie2_download)
            sys.exit()

        if (procs > cpu_count()):
            sys.stderr.write("The number of processors specified [%s] is greater than the number available [%s], exiting application\n" % (str(procs), str(cpu_count())))
            sys.exit()

        from radSeqAmp import mappingApp
        app = mappingApp()

        if profile:
            import cProfile
            cProfile.runctx('app.start(args.fastq_file1, args.fastq_file2, args.fastq_file3, reference, args.insertionSite, overwrite, sensitivity, output_prefix, args.minins, args.maxins, procs, args.mapq, args.dedupReads, uncompressed, verbose, debug)', globals(), locals())
            return 255
        else:
            return app.start(args.fastq_file1, args.fastq_file2, args.fastq_file3, reference, args.insertionSite, overwrite, sensitivity, output_prefix, args.minins, args.maxins, procs, args.mapq, args.dedupReads, uncompressed, verbose, debug)


#####################################################################################
#  Master parser arguments
def parseArgs():
    """
    generate main parser
    """
    parser = argparse.ArgumentParser(
        description='radSeqAmp, a python package for processing radAmSeq Illumina Amplicons',
        epilog='For questions or comments, please contact Matt Settles <settles@ucdavis.edu>\n%(prog)s version: ' + version_num, add_help=True)
    parser.add_argument('--version', action='version', version="%(prog)s version: " + version_num)
    subparsers = parser.add_subparsers(help='commands', dest='command')

    validateParser(subparsers)
    preprocessParser(subparsers)
    joinParser(subparsers)
    mappingParser(subparsers)

    args = parser.parse_args()

    return args


def main():
    """
    main function
    """
    lib_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../')
    if lib_path not in sys.path:
        sys.path.insert(0, lib_path)

    validate = validateCMD()
    preprocess = preprocessCMD()
    join = joinCMD()
    cmap = mappingCMD()

    # commands = {'preprocess': preprocess, 'splitreads': splitreads, 'join': join, 'classify': classify, 'abundance': abundance}
    commands = {'validate': validate, 'preprocess': preprocess, 'join': join, 'map': cmap}

    args = parseArgs()

    commands[args.command].execute(args)

if __name__ == '__main__':
    main()
